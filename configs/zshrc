# If you come from bash you might have to change your ${PATH}.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:${PATH}

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
# export DEFAULT_ZSH_THEME="amuse"

# ZSH_THEMES=("amuse" "peepcode" "sporty_256")
# zsh_themes_length=${#ZSH_THEMES[@]}
# random_index=$((RANDOM % zsh_themes_length))
# export ZSH_THEME=${ZSH_THEMES[$random_index]}
# echo "Selected ZSH theme: $ZSH_THEME"
ZSH_THEME="amuse"

export GCP_ZSH_THEME="dpoggi"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git virtualenv iterm2 helm gcloud kubectl kubectx kube-ps1)

source $ZSH/oh-my-zsh.sh

# Clark Ritchie, random alises and shell stuff
alias ls="ls -la --color"
alias create-pr='create-pr.zsh $1'
alias del-bak='find . -type f -name "*.bak" -exec rm -f {} \;'
export TABSTOP=2
alias h='history'
alias git-sha='git rev-parse --short HEAD'
alias git-tags='git fetch origin --tags && git tag --list --sort=creatordate | tail -1'
alias current-tag='git describe --tags'
alias go-sre='cd ~/Projects/dexcom-inc/sre'
alias go-sre-libs='cd ~/Projects/dexcom-inc/sre-libs'
alias go-database='cd ~/Projects/dexcom-inc/database'
alias new-zshrc='cp ~/Projects/etc/zshrc ~/.zshrc && source ~/.zshrc; cp ~/Projects/etc/zshrc "${HOME}/Library/Mobile Documents/iCloud~md~obsidian/Documents/Misc/obsidian-backup/Code/zshrc.zsh"'
alias new-gitconfig='cp ~/Projects/etc/gitconfig ~/.gitconfig && cp ~/Projects/etc/gitconfig "${HOME}/Library/Mobile Documents/iCloud~md~obsidian/Documents/Misc/obsidian-backup/Code/gitconfig"'
# alias py-install="pip install -r requirements.txt"
alias chart-bump="${HOME}/Projects/clarkritchie/hot-garbage/bin/bump-helm-chart-version.zsh"
alias run-porcelain="git status --porcelain | grep '^??' | cut -c4- | xargs rm -rf"
alias fix-whitespace="sed -i '' 's/[[:space:]]*$//' $1"
alias alt-kubeconfig='export KUBECONFIG=~/.kube/config-alt'
alias kubeconfig='unset KUBECONFIG'

# GCP accounts and projects
alias go-my-gcp='gcloud config set account clark.ritchie@dexcom.com'
alias go-udp2-dev='gcloud config set project dev-us-5g-udp2-1'
alias go-pce='gcloud config set project platform-cloud-engineering'
alias gcloud-login='gcloud auth application-default login'

# K8s shortcuts
alias kwait='while 1; do kubectl get all && sleep 3; done'
alias k=kubectl # /opt/homebrew/Cellar/kubernetes-cli/1.30.2/bin/kubectl
alias klc="k config get-contexts"
alias kcc="k config current-context"
alias kuc="k config use-context"
alias kns="k get namespaces"
alias kdp="k describe pod"
alias kdp='f() { k describe pod $1 };f'
alias kun='f() { k config set-context --current --namespace=$1 };f'
# alias kdr='f() { k apply --dry-run=client $1 $2 -o yaml };f'
# alias kgo='f() { k exec --stdin --tty $1 -- /bin/bash };f' # opens a bash shell on the selected target
kgo() {
  pod=$(kubectl get pods --no-headers | awk "NR==$1" | awk '{print $1}')
  echo "Getting a shell in $pod"
  kubectl exec --stdin --tty "$pod" -- /bin/bash
}


alias kgosh='f() { k  exec --stdin --tty $1 -- /bin/sh };f' # opens a shell on the selected target
alias klogs='f() { k logs -f $1 };f'
alias kevents='kubectl get events --sort-by=".metadata.creationTimestamp"'

kdec(){
    kubectl get secret $1 -o go-template='{{range $k,$v := .data}}{{printf "%s: " $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{"\n"}}{{end}}'
}
alias get-argo-secret='k get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data}" | jq -r '\''to_entries[] | "\(.key): \(.value | @base64d)"'\'
alias argo-port-forward='k port-forward svc/argocd-platform-server 8082:80 -n argocd --context=$(kubectx -c) & sleep 2 && open http://localhost:8082'
alias alt-argo-port-forward='k port-forward svc/argocd-platform-server 8083:80 -n argocd --context=$(kubectx -c)'

kdelpods() {
  kubectl get pods --field-selector=status.phase=Failed -o name | sed 's|pod/||' | xargs kubectl delete pod
}


# Begin Dexcom K8 aliases
# Taken from Dexcom Confouence -- https://confluence.dexcom.com/display/PLATDEVOPS/Setup+kubectx+and+kubens+Aliases
alias kp="kubectl get pods --sort-by=.metadata.creationTimestamp" # Lists pods in the current namespace
# alias kcx="kubectx" # sets your kubeconfig and allows you to jump quickly between Clusters
# alias kn="kubens" # sets your namespace so you dont have to add it using -n anymore
alias kpw="watch kubectl get pods" # runs k get pods every 2s interactively
# kscale is a quick way to scale a deployment up or down.
kscale() {
  k scale deploy $1  --replicas=$2
}
# kscale-all is a quick way to scale all the deployments in a namespace up or down
kscale-all() {
  k scale deploy `k get deployments | grep -v NAME | cut -d" " -f1`  --replicas=$1
}
# gcloud-slim runs a gcloud-slim container in the namespace you are in. This is great for debugging, as it has curl and all gcloud tools in it. Think of it as getting a running terminal session inside the cluster.
gcloud-slim(){
  kubectl run --rm -it --image=google/cloud-sdk:slim gcloud-slim
}
# End Dexcom K8 aliases

# Kube PS1 prompt
# https://github.com/jonmosco/kube-ps1
# Function to show KUBECONFIG status
kubeconfig_status() {
  local default_config="$HOME/.kube/config"
  if [[ -n "$KUBECONFIG" && "$KUBECONFIG" != "$default_config" ]]; then
    echo " ✴️ Alt KUBECONFIG"
  fi
}

# can be disabled with kubeoff and kubeon
KUBE_PS1_SYMBOL_CUSTOM=k8s
KUBE_PS1_SYMBOL_COLOR=cyan
KUBE_PS1_SYMBOL_ENABLE=false
KUBE_PS1_SEPARATOR='****'
# https://apps.timwhitlock.info/emoji/tables/unicode
KUBE_PS1_PREFIX=' ' && KUBE_PS1_SUFFIX=$(printf " %s" '\xF0\x9F\x92\xAC')
KUBE_PS1_CTX_COLOR=yellow
# PROMPT='$(kube_ps1)'$PROMPT
PROMPT='$(kube_ps1)$(kubeconfig_status) '$PROMPT

# Random
# filters out all the containers with names that begin with k8s_
# alias rancher-ps='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Status}}\t{{.Command}}" | awk '\''$3 !~ /k8s_/'\'

# This makes gclient use numpy
export CLOUDSDK_PYTHON_SITEPACKAGES=1

# PATH
export PATH=/opt/homebrew/bin:/opt/homebrew/sbin
export PATH=${PATH}:/usr/bin
export PATH=${PATH}:/usr/local/bin
export PATH=${PATH}:/bin
export PATH=${PATH}:/usr/sbin
export PATH=${PATH}:/sbin

export PATH=${PATH}:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin
export PATH=${PATH}:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin
export PATH=${PATH}:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin
export PATH=${PATH}:Library/Apple/usr/bin

export PATH="${PATH}:/Applications/CyberArk EPM.app/Contents/MacOS"
export PATH=${PATH}:/System/Cryptexes/App/usr/bin
export PATH=${PATH}:/Applications/iTerm.app/Contents/Resources/utilities

export PATH=${PATH}:${HOME}/.rd/bin
export PATH=${PATH}:/opt/homebrew/share/google-cloud-sdk/bin
export PATH=${PATH}:${HOME}/Projects/dexcom-inc/sre/etc
export PATH=${PATH}:${HOME}/Projects/clarkritchie/hot-garbage/bin

export PATH="${PATH}:$(go env GOPATH)/bin"
export PATH="${PATH}:/opt/homebrew/Cellar/mysql-client/8.3.0/bin"
# export PATH="/opt/homebrew/opt/openjdk@17/bin:${PATH}"
# export JAVA_HOME="/opt/homebrew/Cellar/openjdk@17/17.0.12"
# Postgres keg
# https://stackoverflow.com/questions/44654216/correct-way-to-install-psql-without-full-postgres-on-macos
export PATH="${PATH}:/opt/homebrew/opt/libpq/bin:"
# Created by `pipx` on 2025-01-02 03:58:49
export PATH="${PATH}:${HOME}/.local/bin"

# search and replace using agr
function agr() { [ -z "$1" ] && { echo "Error: First argument is empty. Exiting gracefully."; return 1; }; ag -0 -l "$1" | xargs -0 perl -pi.bak -e "s/$1/$2/g"; }
export -f agr 1> /dev/null
alias rm-bak-files="find . -name '*.bak' -exec rm -f {} \;"

# create-pr() {
#   [ -z "$1" ] && { echo "Error: Title/body cannot empty."; return 1; }
#   gh pr create --body="$1" --title="$1" --base="${2:-main}" --label="sre-team" --reviewer=nxk0122 --draft
# }

# create-pr() {
#   [ -z "$1" ] && { echo "Error: Title/body cannot empty."; return 1; }
#   git commit -m "$1"
#   gh pr create --body="$1" --title="$1" --base="${2:-main}" --label="sre-team" --reviewer=nxk0122 ${3}
# }

# alt-create-pr() {
#   [ -z "$1" ] && { echo "Error: Title/body cannot empty."; return 1; }
#   git commit -m "$1"
#   gh pr create --body="$1" --title="$1" --base="${2:-main}"
# }

# gcp, https://formulae.brew.sh/cask/google-cloud-sdk
source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"

# API keys and other shell stuff that's not in this file
KEYS_FILE="${HOME}/Projects/etc/api-keys.zshrc"
MORE_ZSH_FILE="${HOME}/Projects/etc/clark-more-zsh.zshrc"
CLOUDSQL_ALIASES_FILE="${HOME}/Projects/etc/cloudsql-aliases.zshrc"

[[ -f $KEYS_FILE ]] && source $KEYS_FILE
[[ -f $MORE_ZSH_FILE ]] && source $MORE_ZSH_FILE
[[ -f $CLOUDSQL_ALIASES_FILE ]] && source $CLOUDSQL_ALIASES_FILE

# rbenv
eval "$(rbenv init -)"

# color coding for prod
function dex_set_kube_ps1() {
  local CONTEXT=$(kubectl config current-context 2>/dev/null)
  local COLOR="%F{green}"
  [[ $CONTEXT == *"prod-"* ]] && COLOR="%F{red}"
  local RESET="%f"

  local KUBE_PROMPT="${COLOR}${CONTEXT}${RESET} "

  # Only prepend if not already present
  [[ $PS1 != *"$CONTEXT"* ]] && PS1="${KUBE_PROMPT}${PS1}"
}

[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path zsh)"

